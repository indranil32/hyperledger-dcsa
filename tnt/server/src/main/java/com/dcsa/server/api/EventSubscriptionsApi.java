/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.dcsa.server.api;

import com.dcsa.tnt.common.EventSubscription;
import com.dcsa.tnt.common.EventSubscriptionBody;
import com.dcsa.tnt.common.SubscriptionID;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-05-22T05:06:51.764Z[GMT]")
@Validated
public interface EventSubscriptionsApi {

    @Operation(summary = "Receive a list of your active event subscriptions", description = "", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Returns a list of event subscriptions", content = @Content(array = @ArraySchema(schema = @Schema(implementation = EventSubscription.class)))) })
    @RequestMapping(value = "/event-subscriptions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<EventSubscription>> eventSubscriptionsGet();


    @Operation(summary = "Create an event subscription", description = "", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Subscription created", content = @Content(schema = @Schema(implementation = EventSubscription.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/event-subscriptions",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> eventSubscriptionsPost(@Parameter(in = ParameterIn.DEFAULT, description = "Parameters used to configure the subscription", required=true, schema=@Schema()) @Valid @RequestBody EventSubscriptionBody body);


    @Operation(summary = "Stop an event subscription, using the subscription ID", description = "", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Subscription stopped"),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/event-subscriptions/{subscriptionID}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> eventSubscriptionsSubscriptionIDDelete(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("subscriptionID") SubscriptionID subscriptionID);


    @Operation(summary = "Find event subscription by subscription ID", description = "", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Subscription returned", content = @Content(schema = @Schema(implementation = EventSubscription.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/event-subscriptions/{subscriptionID}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<EventSubscription> eventSubscriptionsSubscriptionIDGet(@Parameter(in = ParameterIn.PATH, description = "The universal unique ID of the subscription to receive.", required=true, schema=@Schema()) @PathVariable("subscriptionID") SubscriptionID subscriptionID);


    @Operation(summary = "Alter an event subscription", description = "", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Subscription updated", content = @Content(schema = @Schema(implementation = EventSubscription.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/event-subscriptions/{subscriptionID}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<EventSubscription> eventSubscriptionsSubscriptionIDPut(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("subscriptionID") SubscriptionID subscriptionID, @Parameter(in = ParameterIn.DEFAULT, description = "Parameters used to configure the subscription", required=true, schema=@Schema()) @Valid @RequestBody EventSubscription body);

}

