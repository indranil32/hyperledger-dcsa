/*
 * DCSA OpenAPI specification for Track & Trace
 * API specification issued by DCSA.org
 *
 * OpenAPI spec version: 2.0.1
 * Contact: info@dcsa.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.dcsa.tnt.common;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.UUID;

/**
 * The shipment event entity is a specialization of the event entity to support specification of data that only applies to a shipment event.
 */
@Schema(description = "The shipment event entity is a specialization of the event entity to support specification of data that only applies to a shipment event.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-22T05:06:30.605Z[GMT]")
public class ShipmentEvent extends Event implements AnyOfeventsItems, OneOfinlineResponse200 {
  /**
   * Gets or Sets shipmentEventEventType
   */
  @JsonAdapter(EventTypeEnum.Adapter.class)
  public enum EventTypeEnum {
    SHIPMENT("SHIPMENT");

    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static EventTypeEnum fromValue(String text) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<EventTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return EventTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("eventType")
  private EventTypeEnum shipmentEventEventType = null;

  /**
   * Unique identifier for Event Type Code. For shipment events this can be: - RECE (Received) - CONF (Confirmed) - ISSU (Issued) - APPR (Approved) - SUBM (Submitted) - SURR (Surrendered) - REJE (Rejected) - PENA (Pending approval) 
   */
  @JsonAdapter(EventTypeCodeEnum.Adapter.class)
  public enum EventTypeCodeEnum {
    RECE("RECE"),
    CONF("CONF"),
    ISSU("ISSU"),
    APPR("APPR"),
    SUBM("SUBM"),
    SURR("SURR"),
    REJE("REJE"),
    PENA("PENA");

    private String value;

    EventTypeCodeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static EventTypeCodeEnum fromValue(String text) {
      for (EventTypeCodeEnum b : EventTypeCodeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<EventTypeCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventTypeCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventTypeCodeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return EventTypeCodeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("eventTypeCode")
  private EventTypeCodeEnum eventTypeCode = null;

  @SerializedName("shipmentInformationTypeCode")
  private ShipmentInformationTypeCode shipmentInformationTypeCode = null;

  @SerializedName("shipmentID")
  private UUID shipmentID = null;

  public ShipmentEvent shipmentEventEventType(EventTypeEnum shipmentEventEventType) {
    this.shipmentEventEventType = shipmentEventEventType;
    return this;
  }

   /**
   * Get shipmentEventEventType
   * @return shipmentEventEventType
  **/
  @Schema(example = "SHIPMENT", description = "")
  public EventTypeEnum getShipmentEventEventType() {
    return shipmentEventEventType;
  }

  public void getShipmentEventEventType(EventTypeEnum shipmentEventEventType) {
    this.shipmentEventEventType = shipmentEventEventType;
  }

  public ShipmentEvent eventTypeCode(EventTypeCodeEnum eventTypeCode) {
    this.eventTypeCode = eventTypeCode;
    return this;
  }

   /**
   * Unique identifier for Event Type Code. For shipment events this can be: - RECE (Received) - CONF (Confirmed) - ISSU (Issued) - APPR (Approved) - SUBM (Submitted) - SURR (Surrendered) - REJE (Rejected) - PENA (Pending approval) 
   * @return eventTypeCode
  **/
  @Schema(example = "RECE", description = "Unique identifier for Event Type Code. For shipment events this can be: - RECE (Received) - CONF (Confirmed) - ISSU (Issued) - APPR (Approved) - SUBM (Submitted) - SURR (Surrendered) - REJE (Rejected) - PENA (Pending approval) ")
  public String getEventTypeCode() {
    return eventTypeCode.getValue();
  }

  public void setEventTypeCode(EventTypeCodeEnum eventTypeCode) {
    this.eventTypeCode = eventTypeCode;
  }

  public ShipmentEvent shipmentInformationTypeCode(ShipmentInformationTypeCode shipmentInformationTypeCode) {
    this.shipmentInformationTypeCode = shipmentInformationTypeCode;
    return this;
  }

   /**
   * Get shipmentInformationTypeCode
   * @return shipmentInformationTypeCode
  **/
  @Schema(required = true, description = "")
  public ShipmentInformationTypeCode getShipmentInformationTypeCode() {
    return shipmentInformationTypeCode;
  }

  public void setShipmentInformationTypeCode(ShipmentInformationTypeCode shipmentInformationTypeCode) {
    this.shipmentInformationTypeCode = shipmentInformationTypeCode;
  }

  public ShipmentEvent shipmentID(UUID shipmentID) {
    this.shipmentID = shipmentID;
    return this;
  }

   /**
   * Get shipmentID
   * @return shipmentID
  **/
  @Schema(description = "")
  public UUID getShipmentID() {
    return shipmentID;
  }

  public void setShipmentID(UUID shipmentID) {
    this.shipmentID = shipmentID;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShipmentEvent shipmentEvent = (ShipmentEvent) o;
    return Objects.equals(this.shipmentEventEventType, shipmentEvent.shipmentEventEventType) &&
        Objects.equals(this.eventTypeCode, shipmentEvent.eventTypeCode) &&
        Objects.equals(this.shipmentInformationTypeCode, shipmentEvent.shipmentInformationTypeCode) &&
        Objects.equals(this.shipmentID, shipmentEvent.shipmentID) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(shipmentEventEventType, eventTypeCode, shipmentInformationTypeCode, shipmentID, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShipmentEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    shipmentEventEventType: ").append(toIndentedString(shipmentEventEventType)).append("\n");
    sb.append("    eventTypeCode: ").append(toIndentedString(eventTypeCode)).append("\n");
    sb.append("    shipmentInformationTypeCode: ").append(toIndentedString(shipmentInformationTypeCode)).append("\n");
    sb.append("    shipmentID: ").append(toIndentedString(shipmentID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
