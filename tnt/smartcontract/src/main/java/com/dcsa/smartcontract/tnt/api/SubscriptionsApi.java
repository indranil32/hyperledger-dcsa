/*
 * DCSA OpenAPI specification for Track & Trace
 * API specification issued by DCSA.org
 *
 * OpenAPI spec version: 2.0.1
 * Contact: info@dcsa.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.dcsa.smartcontract.tnt.api;

import com.dcsa.smartcontract.tnt.ApiCallback;
import com.dcsa.smartcontract.tnt.ApiClient;
import com.dcsa.smartcontract.tnt.ApiException;
import com.dcsa.smartcontract.tnt.ApiResponse;
import com.dcsa.smartcontract.tnt.Configuration;
import com.dcsa.smartcontract.tnt.Pair;
import com.dcsa.smartcontract.tnt.ProgressRequestBody;
import com.dcsa.smartcontract.tnt.ProgressResponseBody;
import com.dcsa.tnt.common.EventSubscription;
import com.dcsa.tnt.common.EventSubscriptionBody;
import com.dcsa.tnt.common.SubscriptionID;
import com.google.common.reflect.TypeToken;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SubscriptionsApi {
    private ApiClient apiClient;

    public SubscriptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SubscriptionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for eventSubscriptionsGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventSubscriptionsGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/event-subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventSubscriptionsGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = eventSubscriptionsGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Receive a list of your active event subscriptions
     * 
     * @return List&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EventSubscription> eventSubscriptionsGet() throws ApiException {
        ApiResponse<List<EventSubscription>> resp = eventSubscriptionsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Receive a list of your active event subscriptions
     * 
     * @return ApiResponse&lt;List&lt;EventSubscription&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EventSubscription>> eventSubscriptionsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = eventSubscriptionsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<EventSubscription>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Receive a list of your active event subscriptions (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventSubscriptionsGetAsync(final ApiCallback<List<EventSubscription>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventSubscriptionsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EventSubscription>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventSubscriptionsPost
     * @param body Parameters used to configure the subscription (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventSubscriptionsPostCall(EventSubscriptionBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/event-subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventSubscriptionsPostValidateBeforeCall(EventSubscriptionBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling eventSubscriptionsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = eventSubscriptionsPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create an event subscription
     * 
     * @param body Parameters used to configure the subscription (required)
     * @return EventSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventSubscription eventSubscriptionsPost(EventSubscriptionBody body) throws ApiException {
        ApiResponse<EventSubscription> resp = eventSubscriptionsPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create an event subscription
     * 
     * @param body Parameters used to configure the subscription (required)
     * @return ApiResponse&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventSubscription> eventSubscriptionsPostWithHttpInfo(EventSubscriptionBody body) throws ApiException {
        com.squareup.okhttp.Call call = eventSubscriptionsPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an event subscription (asynchronously)
     * 
     * @param body Parameters used to configure the subscription (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventSubscriptionsPostAsync(EventSubscriptionBody body, final ApiCallback<EventSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventSubscriptionsPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventSubscriptionsSubscriptionIDDelete
     * @param subscriptionID  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventSubscriptionsSubscriptionIDDeleteCall(SubscriptionID subscriptionID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/event-subscriptions/{subscriptionID}"
            .replaceAll("\\{" + "subscriptionID" + "\\}", apiClient.escapeString(subscriptionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventSubscriptionsSubscriptionIDDeleteValidateBeforeCall(SubscriptionID subscriptionID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'subscriptionID' is set
        if (subscriptionID == null) {
            throw new ApiException("Missing the required parameter 'subscriptionID' when calling eventSubscriptionsSubscriptionIDDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = eventSubscriptionsSubscriptionIDDeleteCall(subscriptionID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Stop an event subscription, using the subscription ID
     * 
     * @param subscriptionID  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void eventSubscriptionsSubscriptionIDDelete(SubscriptionID subscriptionID) throws ApiException {
        eventSubscriptionsSubscriptionIDDeleteWithHttpInfo(subscriptionID);
    }

    /**
     * Stop an event subscription, using the subscription ID
     * 
     * @param subscriptionID  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> eventSubscriptionsSubscriptionIDDeleteWithHttpInfo(SubscriptionID subscriptionID) throws ApiException {
        com.squareup.okhttp.Call call = eventSubscriptionsSubscriptionIDDeleteValidateBeforeCall(subscriptionID, null, null);
        return apiClient.execute(call);
    }

    /**
     * Stop an event subscription, using the subscription ID (asynchronously)
     * 
     * @param subscriptionID  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventSubscriptionsSubscriptionIDDeleteAsync(SubscriptionID subscriptionID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventSubscriptionsSubscriptionIDDeleteValidateBeforeCall(subscriptionID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for eventSubscriptionsSubscriptionIDGet
     * @param subscriptionID The universal unique ID of the subscription to receive. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventSubscriptionsSubscriptionIDGetCall(SubscriptionID subscriptionID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/event-subscriptions/{subscriptionID}"
            .replaceAll("\\{" + "subscriptionID" + "\\}", apiClient.escapeString(subscriptionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventSubscriptionsSubscriptionIDGetValidateBeforeCall(SubscriptionID subscriptionID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'subscriptionID' is set
        if (subscriptionID == null) {
            throw new ApiException("Missing the required parameter 'subscriptionID' when calling eventSubscriptionsSubscriptionIDGet(Async)");
        }
        
        com.squareup.okhttp.Call call = eventSubscriptionsSubscriptionIDGetCall(subscriptionID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Find event subscription by subscription ID
     * 
     * @param subscriptionID The universal unique ID of the subscription to receive. (required)
     * @return EventSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventSubscription eventSubscriptionsSubscriptionIDGet(SubscriptionID subscriptionID) throws ApiException {
        ApiResponse<EventSubscription> resp = eventSubscriptionsSubscriptionIDGetWithHttpInfo(subscriptionID);
        return resp.getData();
    }

    /**
     * Find event subscription by subscription ID
     * 
     * @param subscriptionID The universal unique ID of the subscription to receive. (required)
     * @return ApiResponse&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventSubscription> eventSubscriptionsSubscriptionIDGetWithHttpInfo(SubscriptionID subscriptionID) throws ApiException {
        com.squareup.okhttp.Call call = eventSubscriptionsSubscriptionIDGetValidateBeforeCall(subscriptionID, null, null);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find event subscription by subscription ID (asynchronously)
     * 
     * @param subscriptionID The universal unique ID of the subscription to receive. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventSubscriptionsSubscriptionIDGetAsync(SubscriptionID subscriptionID, final ApiCallback<EventSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventSubscriptionsSubscriptionIDGetValidateBeforeCall(subscriptionID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventSubscriptionsSubscriptionIDPut
     * @param body Parameters used to configure the subscription (required)
     * @param subscriptionID  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventSubscriptionsSubscriptionIDPutCall(EventSubscription body, SubscriptionID subscriptionID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/event-subscriptions/{subscriptionID}"
            .replaceAll("\\{" + "subscriptionID" + "\\}", apiClient.escapeString(subscriptionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventSubscriptionsSubscriptionIDPutValidateBeforeCall(EventSubscription body, SubscriptionID subscriptionID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling eventSubscriptionsSubscriptionIDPut(Async)");
        }
        // verify the required parameter 'subscriptionID' is set
        if (subscriptionID == null) {
            throw new ApiException("Missing the required parameter 'subscriptionID' when calling eventSubscriptionsSubscriptionIDPut(Async)");
        }
        
        com.squareup.okhttp.Call call = eventSubscriptionsSubscriptionIDPutCall(body, subscriptionID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Alter an event subscription
     * 
     * @param body Parameters used to configure the subscription (required)
     * @param subscriptionID  (required)
     * @return EventSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventSubscription eventSubscriptionsSubscriptionIDPut(EventSubscription body, SubscriptionID subscriptionID) throws ApiException {
        ApiResponse<EventSubscription> resp = eventSubscriptionsSubscriptionIDPutWithHttpInfo(body, subscriptionID);
        return resp.getData();
    }

    /**
     * Alter an event subscription
     * 
     * @param body Parameters used to configure the subscription (required)
     * @param subscriptionID  (required)
     * @return ApiResponse&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventSubscription> eventSubscriptionsSubscriptionIDPutWithHttpInfo(EventSubscription body, SubscriptionID subscriptionID) throws ApiException {
        com.squareup.okhttp.Call call = eventSubscriptionsSubscriptionIDPutValidateBeforeCall(body, subscriptionID, null, null);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Alter an event subscription (asynchronously)
     * 
     * @param body Parameters used to configure the subscription (required)
     * @param subscriptionID  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventSubscriptionsSubscriptionIDPutAsync(EventSubscription body, SubscriptionID subscriptionID, final ApiCallback<EventSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventSubscriptionsSubscriptionIDPutValidateBeforeCall(body, subscriptionID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
