/*
 * DCSA OpenAPI specification for Track & Trace
 * API specification issued by DCSA.org
 *
 * OpenAPI spec version: 2.0.1
 * Contact: info@dcsa.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.dcsa.smartcontract.tnt.api;

import com.dcsa.smartcontract.tnt.*;
import com.dcsa.tnt.common.EventTypeList;
import com.dcsa.tnt.common.Events;
import com.dcsa.tnt.common.InlineResponse200;
import com.google.common.reflect.TypeToken;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.*;

public class EventsApi {
    private ApiClient apiClient;

    public EventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for eventsEventIDGet
     * @param eventID The ID of the event to receive (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventsEventIDGetCall(String eventID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events/{eventID}"
            .replaceAll("\\{" + "eventID" + "\\}", apiClient.escapeString(eventID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventsEventIDGetValidateBeforeCall(String eventID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'eventID' is set
        if (eventID == null) {
            throw new ApiException("Missing the required parameter 'eventID' when calling eventsEventIDGet(Async)");
        }
        
        com.squareup.okhttp.Call call = eventsEventIDGetCall(eventID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Find events by eventID.
     * Returns event with the specified eventID.
     * @param eventID The ID of the event to receive (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 eventsEventIDGet(String eventID) throws ApiException {
        ApiResponse<InlineResponse200> resp = eventsEventIDGetWithHttpInfo(eventID);
        return resp.getData();
    }

    /**
     * Find events by eventID.
     * Returns event with the specified eventID.
     * @param eventID The ID of the event to receive (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> eventsEventIDGetWithHttpInfo(String eventID) throws ApiException {
        com.squareup.okhttp.Call call = eventsEventIDGetValidateBeforeCall(eventID, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find events by eventID. (asynchronously)
     * Returns event with the specified eventID.
     * @param eventID The ID of the event to receive (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventsEventIDGetAsync(String eventID, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventsEventIDGetValidateBeforeCall(eventID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventsGet
     * @param eventType The type of event(s) to filter by. (optional)
     * @param bookingReference The identifier for a shipment, which is issued by and unique within each of the carriers. (optional)
     * @param transportDocumentID The Transport Document ID number is an identifier that links to a shipment, i.e. a Bill of Lading or a Sea Waybill. A bill of lading is the document of title to the goods issued to the customer which confirms the carrier&#x27;s receipt of the cargo from the customer, acknowledging goods being shipped and specifying the terms of delivery. The Sea Waybill is a simpler document, the main difference being that it is non-negotiable. (optional)
     * @param equipmentReference The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible. (optional)
     * @param scheduleID ID uniquely identifying a schedule, to filter events by. (optional)
     * @param transportCallID ID uniquely identifying a transport call, to filter events by. (optional)
     * @param limit Maximum number of items to return. (optional)
     * @param cursor A server generated value to specify a specific point in a collection result, used for pagination. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventsGetCall(EventTypeList eventType, String bookingReference, String transportDocumentID, String equipmentReference, UUID scheduleID, UUID transportCallID, Object limit, Object cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (eventType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("eventType", eventType));
        if (bookingReference != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bookingReference", bookingReference));
        if (transportDocumentID != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("transportDocumentID", transportDocumentID));
        if (equipmentReference != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("equipmentReference", equipmentReference));
        if (scheduleID != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scheduleID", scheduleID));
        if (transportCallID != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("transportCallID", transportCallID));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventsGetValidateBeforeCall(EventTypeList eventType, String bookingReference, String transportDocumentID, String equipmentReference, UUID scheduleID, UUID transportCallID, Object limit, Object cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = eventsGetCall(eventType, bookingReference, transportDocumentID, equipmentReference, scheduleID, transportCallID, limit, cursor, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Find events.
     * Returns all events filtered by the parameters.
     * @param eventType The type of event(s) to filter by. (optional)
     * @param bookingReference The identifier for a shipment, which is issued by and unique within each of the carriers. (optional)
     * @param transportDocumentID The Transport Document ID number is an identifier that links to a shipment, i.e. a Bill of Lading or a Sea Waybill. A bill of lading is the document of title to the goods issued to the customer which confirms the carrier&#x27;s receipt of the cargo from the customer, acknowledging goods being shipped and specifying the terms of delivery. The Sea Waybill is a simpler document, the main difference being that it is non-negotiable. (optional)
     * @param equipmentReference The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible. (optional)
     * @param scheduleID ID uniquely identifying a schedule, to filter events by. (optional)
     * @param transportCallID ID uniquely identifying a transport call, to filter events by. (optional)
     * @param limit Maximum number of items to return. (optional)
     * @param cursor A server generated value to specify a specific point in a collection result, used for pagination. (optional)
     * @return Events
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Events eventsGet(EventTypeList eventType, String bookingReference, String transportDocumentID, String equipmentReference, UUID scheduleID, UUID transportCallID, Object limit, Object cursor) throws ApiException {
        ApiResponse<Events> resp = eventsGetWithHttpInfo(eventType, bookingReference, transportDocumentID, equipmentReference, scheduleID, transportCallID, limit, cursor);
        return resp.getData();
    }

    /**
     * Find events.
     * Returns all events filtered by the parameters.
     * @param eventType The type of event(s) to filter by. (optional)
     * @param bookingReference The identifier for a shipment, which is issued by and unique within each of the carriers. (optional)
     * @param transportDocumentID The Transport Document ID number is an identifier that links to a shipment, i.e. a Bill of Lading or a Sea Waybill. A bill of lading is the document of title to the goods issued to the customer which confirms the carrier&#x27;s receipt of the cargo from the customer, acknowledging goods being shipped and specifying the terms of delivery. The Sea Waybill is a simpler document, the main difference being that it is non-negotiable. (optional)
     * @param equipmentReference The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible. (optional)
     * @param scheduleID ID uniquely identifying a schedule, to filter events by. (optional)
     * @param transportCallID ID uniquely identifying a transport call, to filter events by. (optional)
     * @param limit Maximum number of items to return. (optional)
     * @param cursor A server generated value to specify a specific point in a collection result, used for pagination. (optional)
     * @return ApiResponse&lt;Events&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Events> eventsGetWithHttpInfo(EventTypeList eventType, String bookingReference, String transportDocumentID, String equipmentReference, UUID scheduleID, UUID transportCallID, Object limit, Object cursor) throws ApiException {
        com.squareup.okhttp.Call call = eventsGetValidateBeforeCall(eventType, bookingReference, transportDocumentID, equipmentReference, scheduleID, transportCallID, limit, cursor, null, null);
        Type localVarReturnType = new TypeToken<Events>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find events. (asynchronously)
     * Returns all events filtered by the parameters.
     * @param eventType The type of event(s) to filter by. (optional)
     * @param bookingReference The identifier for a shipment, which is issued by and unique within each of the carriers. (optional)
     * @param transportDocumentID The Transport Document ID number is an identifier that links to a shipment, i.e. a Bill of Lading or a Sea Waybill. A bill of lading is the document of title to the goods issued to the customer which confirms the carrier&#x27;s receipt of the cargo from the customer, acknowledging goods being shipped and specifying the terms of delivery. The Sea Waybill is a simpler document, the main difference being that it is non-negotiable. (optional)
     * @param equipmentReference The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible. (optional)
     * @param scheduleID ID uniquely identifying a schedule, to filter events by. (optional)
     * @param transportCallID ID uniquely identifying a transport call, to filter events by. (optional)
     * @param limit Maximum number of items to return. (optional)
     * @param cursor A server generated value to specify a specific point in a collection result, used for pagination. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventsGetAsync(EventTypeList eventType, String bookingReference, String transportDocumentID, String equipmentReference, UUID scheduleID, UUID transportCallID, Object limit, Object cursor, final ApiCallback<Events> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventsGetValidateBeforeCall(eventType, bookingReference, transportDocumentID, equipmentReference, scheduleID, transportCallID, limit, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Events>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
